"0","# Initialisation du générateur de nombre aléatoire afin que les résulats soit les "
"0","# mêmes d'une fois à l'autre. Il n'y a rien d'aléatoire dans la construction de l'arbre"
"0","# lui-même mais l'élagage est fait avec une procédure de validation-croisée qui "
"0","# comporte un élément aléatoire. "
"0","set.seed(3454)"
"0",""
"0","library(rpart)"
"0",""
"0","# Construction de l'arbre initial."
"0",""
"0","# Différentes options pour contrôler la taille de l'arbre sont dans ""rpart.control""."
"0","# Ici, ""xval=10"" demande d'utiliser la validation-croisée à 10 groupes pour faire l'élagage."
"0","# ""minsplit=20"" indique qu'il faut au moins 20 observations pour diviser un noeud."
"0","# ""minbucket = 7"" indique qu'un noeud enfant doit contenir au moins 7 observations."
"0","# Le ""cp"" permet de contrôler la construction de l'arbre en ne divisant pas un noeud "
"0","# s'il n'améliore pas suffisamment le modèle. Cela permet de diminuer le temps de calcul "
"0","# en coupant d'avance des branches qui risqueraient d'être éliminées dans l'élagage. "
"0","# En le mettant à 0, comme ici, on permet à l'arbre de se construire jusqu'au bout et ce "
"0","# sont seulement les autres paramètres qui contrôlent la taille de l'arbre."
"0",""
"0","treechurn = rpart(Churn.Value~. , data=churntrain,method=""class"" ,"
"0","    control = rpart.control(xval = 10, minsplit=20, minbucket=7,cp=0))"
"0",""
"0","# Nombre de noeuds terminaux dans l'arbre"
"0","length(unique(treechurn$where))"
"1","[1]"
"1"," 66"
"1","
"
"0","treechurn$cptable"
"1","  "
"1","           CP"
"1"," nsplit"
"1"," rel error"
"1","    xerror"
"1","       xstd"
"1","
1 "
"1"," 0.1104725415"
"1","      0"
"1"," 1.0000000"
"1"," 1.0000000"
"1"," 0.03072142"
"1","
2 "
"1"," 0.0574712644"
"1","      2"
"1"," 0.7790549"
"1"," 0.7854406"
"1"," 0.02823965"
"1","
3 "
"1"," 0.0510855683"
"1","      3"
"1"," 0.7215837"
"1"," 0.7637292"
"1"," 0.02794568"
"1","
4 "
"1"," 0.0255427842"
"1","      4"
"1"," 0.6704981"
"1"," 0.7062580"
"1"," 0.02712421"
"1","
5 "
"1"," 0.0079821201"
"1","      6"
"1"," 0.6194125"
"1"," 0.6819923"
"1"," 0.02675745"
"1","
6 "
"1"," 0.0076628352"
"1","     10"
"1"," 0.5874840"
"1"," 0.6411239"
"1"," 0.02611113"
"1","
7 "
"1"," 0.0055342699"
"1","     13"
"1"," 0.5644955"
"1"," 0.6411239"
"1"," 0.02611113"
"1","
8 "
"1"," 0.0051085568"
"1","     17"
"1"," 0.5389527"
"1"," 0.6436782"
"1"," 0.02615262"
"1","
9 "
"1"," 0.0044699872"
"1","     23"
"1"," 0.5083014"
"1"," 0.6500639"
"1"," 0.02625569"
"1","
10"
"1"," 0.0038314176"
"1","     29"
"1"," 0.4814815"
"1"," 0.6871009"
"1"," 0.02683569"
"1","
11"
"1"," 0.0034057046"
"1","     33"
"1"," 0.4661558"
"1"," 0.6858238"
"1"," 0.02681618"
"1","
12"
"1"," 0.0025542784"
"1","     36"
"1"," 0.4559387"
"1"," 0.6985951"
"1"," 0.02700972"
"1","
13"
"1"," 0.0022349936"
"1","     50"
"1"," 0.4201788"
"1"," 0.6960409"
"1"," 0.02697128"
"1","
14"
"1"," 0.0019157088"
"1","     54"
"1"," 0.4112388"
"1"," 0.7164751"
"1"," 0.02727501"
"1","
15"
"1"," 0.0017028523"
"1","     58"
"1"," 0.4035760"
"1"," 0.7190294"
"1"," 0.02731238"
"1","
16"
"1"," 0.0012771392"
"1","     61"
"1"," 0.3984674"
"1"," 0.7203065"
"1"," 0.02733102"
"1","
17"
"1"," 0.0006385696"
"1","     63"
"1"," 0.3959132"
"1"," 0.7471264"
"1"," 0.02771495"
"1","
18"
"1"," 0.0000000000"
"1","     65"
"1"," 0.3946360"
"1"," 0.7650064"
"1"," 0.02796321"
"1","
"
"0","matplot(treechurn$cptable[,2],treechurn$cptable[,3:4],type=""l"", xlab=""Nombre de splits"", ylab=""Erreur relative"")"
